version: "3.7"

services:
  gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    depends_on:
      - "kafka"
      - "zookeeper"
      - "kafdrop"
  users:
    build:
      context: ./users
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    environment:
      DATABASE_URL: "jdbc:postgresql://db:5432/users"
      DATABASE_USER: "postgres"
      DATABASE_PW: "password"
    depends_on:
      - "kafka"
      - "zookeeper"
      - "kafdrop"
      - db
  concerts:
    build:
      context: ./concerts
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
    environment:
      DATABASE_URL: "jdbc:postgresql://db:5432/concerts"
      DATABASE_USER: "postgres"
      DATABASE_PW: "password"
    depends_on:
      - "kafka"
      - "zookeeper"
      - "kafdrop"
      - db
  venues:
    build:
      context: ./venues
      dockerfile: Dockerfile
    ports:
      - "8084:8084"
    environment:
      DATABASE_URL: "jdbc:postgresql://db:5432/venues"
      DATABASE_USER: "postgres"
      DATABASE_PW: "password"
    depends_on:
      - "kafka"
      - "zookeeper"
      - "kafdrop"
      - db
  tickets:
    build:
      context: ./tickets
      dockerfile: Dockerfile
    ports:
      - "8085:8085"
    environment:
      DATABASE_URL: "jdbc:postgresql://db:5432/tickets"
      DATABASE_USER: "postgres"
      DATABASE_PW: "password"
    depends_on:
      - "kafka"
      - "zookeeper"
      - "kafdrop"
      - db
  auth:
    build:
      context: ./auth
      dockerfile: Dockerfile
    ports:
      - "8086:8086"
      - "5056:5056"
    environment:
      DATABASE_URL: "jdbc:postgresql://db:5432/auth"
      DATABASE_USER: "postgres"
      DATABASE_PW: "password"
    depends_on:
      - "kafka"
      - "zookeeper"
      - "kafdrop"
      - db
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
  kafka:
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: >-
        LISTENER_DOCKER_INTERNAL://kafka:19092, 
        LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-kafka}:9092
      KAFKA_LISTENERS: >-
        LISTENER_DOCKER_INTERNAL://:19092,
        LISTENER_DOCKER_EXTERNAL://:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: >-
        LISTENER_DOCKER_INTERNAL:PLAINTEXT,
        LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LOG4J_LOGGERS: >-
        kafka.controller=INFO,
        kafka.producer.async.DefaultEventHandler=INFO,
        state.change.logger=INFO
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
  kafdrop:
    image: obsidiandynamics/kafdrop
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:9092"
    depends_on:
      - "kafka"
  db:
    container_name: db
    image: debezium/postgres:13
    volumes:
      - ./docker-postgresql-multiple-databases:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_MULTIPLE_DATABASES=concerts,postgres:users,postgres:venues,postgres:tickets,postgres:auth,postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_USER=postgres
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: always
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: "petrovic.ra142.2019@uns.ac.rs"
      PGADMIN_DEFAULT_PASSWORD: "password"
    volumes:
      - ./pgadmin/:/var/lib/pgadmin
  connect:
    image: debezium/connect
    ports:
      - 8888:8888
    environment:
      GROUP_ID: 1
      BOOTSTRAP_SERVERS: "kafka:9092"
      CONFIG_STORAGE_TOPIC: my_connect_configs
      OFFSET_STORAGE_TOPIC: my_connect_offsets
      STATUS_STORAGE_TOPIC: my_connect_statuses
    volumes:
      - ./connectors:/scripts
    command:
      - bash
      - -c
      - |
        /scripts/create-postgres-source.sh connect 8888 &
        /docker-entrypoint.sh start